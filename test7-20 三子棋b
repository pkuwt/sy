#define _CRT_SECURE_NO_WARNINGS 1
#include "szq.h"

void csh(char arr[row][del], int r, int d)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < r; i++)
	{
		for (j = 0; j < d; j++)
		{
			arr[i][j] = ' ';
		}
	}
}

void dyqpan(char arr[row][del], int r, int d) {
	int i = 0;
	int j = 0;
	for (i = 0; i < r; i++) {
		for (j = 0; j < d; j++) {
			printf(" %c ",arr[i][j]);
			if (j < d - 1) { printf("|"); }
		}
		printf("\n");
		if (i < r - 1) {
			for (j = 0; j < d; j++) {
				printf("---");
				if (j < d - 1) { printf("|"); }
			}
			printf("\n");
		}
	}
}

void wj(char arr[row][del], int r, int d) {
	int x = 0;
	int y = 0;
	while (1) {
		printf("请输入要下的坐标");
		scanf("%d %d", &x, &y);
		if (x <= r && y <= d) {
			if (arr[x-1][y-1] == ' ')
			{
				arr[x-1][y-1] = '*';
				break;
			}
			else {
				printf("该位置已经被占据");
			}
		}
		else {
			printf("输入有误,请重新输入");
		}

	}
}

void dn(char arr[row][del], int r, int d) {
	while (1) {
		int x = rand() % row;
		int y = rand() % del;

		if (x < r &&y < d) {
			if (arr[x][y] == ' ')
			{   printf("电脑已下\n");
				arr[x][y] = '#';
				break;
			}
		}
	}
}

int full(char arr[row][del],int r, int d) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < del; j++) {
			if (arr[i][j] == ' ') {
				return 1;
			}
		}
	}
	return 0;
}



char win(char arr[row][del], int r, int d) {
	for (int i = 0 ; i < r ; i++) {
		if (arr[0][i] == arr[1][i] && arr[1][i] == arr[2][i] && arr[1][i] != ' ') {
			return arr[0][i];
		}
	}
	for (int i = 0; i < r; i++) {
		if (arr[i][0] == arr[i][1] && arr[i][1] == arr[i][2] && arr[i][1] != ' ') {
			return arr[0][i];
		}
	}
	if (arr[0][0] == arr[1][1] && arr[1][1] == arr[2][2] && arr[1][1] != ' ') {
		return arr[0][0];
	}
	if (arr[0][3] == arr[1][1] && arr[1][1] == arr[3][0] && arr[1][1] != ' ') {
		return arr[1][1];
	}

	int ret=full(arr, row, del);
	if (ret == 1) {
		return 'C';
	}
	else {
		return 'B';
	}
}
